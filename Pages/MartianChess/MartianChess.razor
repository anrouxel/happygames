@using Microsoft.AspNetCore.SignalR.Client
@using happygames.Data.MartianChess
@using happygames.Hubs
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@implements IDisposable

@page "/martianchess"
@* @attribute [Authorize] *@

<PageTitle>Echec Martien</PageTitle>

@if (isGame && board != null)
{
    <div class="d-flex flex-column">
        @for (int y = 0; y < board.verticalSize; y++)
        {
            <div class="d-flex flex-row">
                @for (int x = 0; x < board.horizontalSize; x++)
                {
                    string pawn = "";
                    if (board.boxes[y][x].pawn != null)
                    {
                        pawn = board.boxes[y][x].pawn!.pawn;
                    }
                    CoordinateData coordinate = new CoordinateData(x, y);
                    <RadzenButton Style="height: 5rem; width: 5rem; border-radius: 0%;" Text=@pawn
            Click="() => displace(coordinate)" />
                }
            </div>
        }
    </div>
}

@code {
    private HubConnection? hubConnection;
    private string? hubUrl;
    private BoardData? board;
    private bool isGame;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string baseUrl = NavigationManager.BaseUri;
            hubUrl = baseUrl.TrimEnd('/') + MartianChessHub.HubUrl;
            hubConnection = new HubConnectionBuilder().WithUrl(hubUrl).Build();
            hubConnection.On<bool>("isGame", isGameSignalR);
            hubConnection.On<BoardData>("OnBoard", OnBoardSignalR);
            hubConnection.On<NotificationSeverity, string, string>("OnNotification", OnNotification);
            await hubConnection.StartAsync();
        }
        catch (Exception)
        {
            isGame = false;
        }
    }

    public void Dispose()
    {
        hubConnection!.StopAsync();
        hubConnection!.DisposeAsync();
    }

    private void isGameSignalR(bool isGame)
    {
        this.isGame = isGame;
        StateHasChanged();
    }

    private void OnBoardSignalR(BoardData board)
    {
        this.board = board;
        StateHasChanged();
    }

    private async Task displace(CoordinateData coordinate)
    {
        await hubConnection!.SendAsync("OnDisplace", coordinate);
    }

    private void OnNotification(NotificationSeverity severity, string summary, string detail)
    {
        NotificationMessage notificationMessage = new NotificationMessage
        {
            Severity = severity,
            Summary = summary,
            Detail = detail,
            Duration = 4000
        };
        NotificationService.Notify(notificationMessage);
    }
}
