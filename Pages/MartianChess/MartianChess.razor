@page "/martianchess"
@using happygames.Data
@inject NotificationService NotificationService

<PageTitle>Echec Martien</PageTitle>

<div class="container">
    @for (int y = 0; y < game!.getVerticalSize(); y++)
    {
        <div class="row">
            @for (int x = 0; x < game!.getHorizontalSize(); x++)
            {
                string pawn;
                Coordinate coordinate = new Coordinate(x, y);
                switch (game!.getBoard()[y, x].getPawn())
                {
                    case SmallPawn smallPawn:
                        pawn = "P";
                        break;
                    case MediumPawn mediumPawn:
                        pawn = "M";
                        break;
                    case BigPawn bigPawn:
                        pawn = "G";
                        break;
                    default:
                        pawn = "";
                        break;
                }
                <div class="col">
                    <RadzenButton Style="height: 50px; width: 100%;" Text=@pawn Click="() => displace(coordinate)" />
                </div>
            }
        </div>
    }
</div>

@code {
    private Game? game;
    private bool isDisplace;

    protected override void OnInitialized()
    {
        game = new Game();
        game.initializeGame(new Player("1"), new Player("2"), 6);
        isDisplace = false;
    }

    private void displace(Coordinate coordinate)
    {
        if (isDisplace == true)
        {
            try
            {
                game!.setCoordDestinationDisplacement(coordinate);
                game.displace(game.getCoordOriginDisplacement().getX(), game.getCoordOriginDisplacement().getY(),
                game.getCoordDestinationDisplacement().getX(), game.getCoordDestinationDisplacement().getY(), game.getCurrentPlayer());
                game!.changePlayer();
            }
            catch (DisplacementException e)
            {
                showError(game!.getCurrentPlayer()!.getUsername(), e.Message);
            }
            isDisplace = false;
        }
        else
        {
            game!.setCoordOriginDisplacement(coordinate);
            isDisplace = true;
        }
    }

    private void showError(string username, string message)
    {
        NotificationMessage notificationMessage = new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = username,
            Detail = message,
            Duration = 4000
        };
        NotificationService.Notify(notificationMessage);
    }
}
